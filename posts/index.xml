<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ~klyr</title>
    <link>https://klyr.github.io/posts/</link>
    <description>Recent content in Posts on ~klyr</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://klyr.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>OpenSSH related stuff</title>
      <link>https://klyr.github.io/posts/openssh/</link>
      <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/openssh/</guid>
      <description>Create a ed25519 SSH key  ECC: Elliptic Curve Cryptography is a family of algorithms (ECDSA, ed25519) Curve25519: name of the elliptic curve Ed25519: Name of the signature algorithm  $ ssh-keygen -a 100 -t ed25519 -b 521 -f ~/.ssh/id_ed25519.barbot.org -C &amp;#34;julien@barbot.org&amp;#34; You can look at explainshell.com to understand each parameters.
Use this key for specific hosts:
$ cat .ssh/config Host github.com IdentityFile ~/.</description>
    </item>
    
    <item>
      <title>Playing with the P4 language</title>
      <link>https://klyr.github.io/posts/playing_with_p4/</link>
      <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/playing_with_p4/</guid>
      <description>Introduction P4 is a domain-specific compiled programming language for network data forwarding. It does not know anything about already existing protocols: it doesn&amp;rsquo;t know IP, nor TCP.
A P4 program is compiled to something that is understandable by the P4 aware device. Such device can be a really hardware switch, a software switch, a FPGA.
In this article we will try to use a software switch. More precisely, the uBPF backend.</description>
    </item>
    
    <item>
      <title>Playing with uBPF</title>
      <link>https://klyr.github.io/posts/playing_with_ubpf/</link>
      <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/playing_with_ubpf/</guid>
      <description>Introduction uBPF is a user-land implementation of the eBPF VM.
Installation $ git clone https://github.com/iovisor/ubpf.git $ cd ubpf $ make -C vm This compiles the ubpf library (libubpf.a) and a test program to use this library.
Run a simple eBPF program with uBPF static int idouble(int a) { return (a * 2); } int bpf_prog(void *ctx) { int a = 1; a = idouble(a); return (a); } Compile to a BPF binary, which is executable by the kernel eBPF VM, or, in our specific case, the user-land uBFP VM.</description>
    </item>
    
    <item>
      <title>Installing Lineage OS to a Samsung Galaxy A3</title>
      <link>https://klyr.github.io/posts/samsung_a3_lineage/</link>
      <pubDate>Tue, 18 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/samsung_a3_lineage/</guid>
      <description>Introduction Heimdal Build Heimdal git clone https://gitlab.com/BenjaminDobell/Heimdall.git sudo dnf install libusb-devel.x86_64 cd Heimdall mkdir build; cd build cmake -DCMAKE_BUILD_TYPE=Release -DDISABLE_FRONTEND .. make Check installation Put your device in download mode, on the A3 it&amp;rsquo;s:
 1 Switch OFF device 2 Volume Down + Home button + Power button. 3 Choose Download mode: Volume Up  $ sudo ./heimdal detect Download PIT file $ sudo ./heimdall download-pit --output &amp;#39;a3-2020-02-20.pit&amp;#39; --verbose Heimdall v1.</description>
    </item>
    
    <item>
      <title>Playing with eBPF (extended BPF)</title>
      <link>https://klyr.github.io/posts/ebpf/</link>
      <pubDate>Wed, 25 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/ebpf/</guid>
      <description>Let&amp;rsquo;s play with eBPF in order to find what is slowing down my computer</description>
    </item>
    
    <item>
      <title>Playing with the Erlang Linc Switch</title>
      <link>https://klyr.github.io/posts/playing_with_linc_switch/</link>
      <pubDate>Fri, 19 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/playing_with_linc_switch/</guid>
      <description>Introduction Linc is a software switch in Erlang, which support Openflow 1.4.
Here we will try to install it and make it run in a simple scenario. Later we will try to use it with an openflow compatible Controller (maybe Opendaylight or FlowER).
Installation $ git clone https://github.com/FlowForwarding/LINC-Switch.git $ sudo apt-get install libpcap0.8-dev $ cd LINC-Switch $ cp rel/files/sys.config.orig rel/files/sys.config $ make Note that at some point during installation, root privileges are required to use the setcap utility.</description>
    </item>
    
    <item>
      <title>Linking Rust Library with C</title>
      <link>https://klyr.github.io/posts/linking_rust_lib_with_c/</link>
      <pubDate>Wed, 17 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/linking_rust_lib_with_c/</guid>
      <description>Introduction Rust is a system programming Language developed by Mozilla. For a C-like language, it features interesting paradigms:
 functional style, actors, object oriented, safe memory allocation and free  In this article we will link a Rust library with a C program.
Tools used:
 rustc 0.13.0-nightly (5484d6f6d 2014-12-02) gcc (Debian 4.9.1-19) 4.9.1 docker  Installation Compiling the Rust compiler takes quite some time, so I decided to use a nightly built container of the compiler:</description>
    </item>
    
    <item>
      <title>Playing with linux framebuffer</title>
      <link>https://klyr.github.io/posts/playing_with_linux_framebuffer/</link>
      <pubDate>Wed, 19 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/playing_with_linux_framebuffer/</guid>
      <description>Playing with the framebuffer on Linux</description>
    </item>
    
    <item>
      <title>Updating IP routes programmatically</title>
      <link>https://klyr.github.io/posts/updating_ip_routes_in_c/</link>
      <pubDate>Mon, 10 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/updating_ip_routes_in_c/</guid>
      <description>ioctl(2) is a special system call used when no other system call can handle a specific I/O operation. For exemple, the generic write(2) syscall is used for writing to a specified file descriptor but there is neither syscall to open the CD-tray nor syscall to manage routing tables: ioctl is here as a fit-all syscall.
From the man page:
NAME ioctl - control device SYNOPSIS #include &amp;lt;sys/ioctl.h&amp;gt; int ioctl(int d, int request, void *args); DESCRIPTION The ioctl() function manipulates the underlying device parameters of special files.</description>
    </item>
    
    <item>
      <title>Display backtrace when a program segfaults</title>
      <link>https://klyr.github.io/posts/gnu_backtrace_extension/</link>
      <pubDate>Mon, 03 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/gnu_backtrace_extension/</guid>
      <description>When an application crashes, with a segfault for example it can be usefull have debugging help like a stacktrace of function calls</description>
    </item>
    
    <item>
      <title>Trickle, lightweight userspace bandwidth shaper</title>
      <link>https://klyr.github.io/posts/trickle/</link>
      <pubDate>Tue, 10 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/trickle/</guid>
      <description>What &amp;ldquo;Trickle is a portable lightweight userspace bandwidth shaper. It can run in collaborative mode (together with trickled) or in stand alone mode.&amp;rdquo;
Before, no limitation:
$ wget &amp;#39;http://wwww.example.org/somefile&amp;#39; --2012-07-10 14:46:13-- http://wwww.example.org/somefile [ ... ] 2012-07-10 14:46:13 (866 KB/s) - `somefile&amp;#39; saved [12485] After, limited to 40 kbit/s:
$ trickle -v -s -d 40 wget &amp;#39;http://www.example.org/somefile&amp;#39; --2012-07-10 14:50:27-- http://wwww.example.org/somefile [ ... ] wget: [trickle] avg: 20.8 KB/s; win: 20.8 KB/s wget: [trickle] avg: 40.</description>
    </item>
    
    <item>
      <title>Playing with systemtap</title>
      <link>https://klyr.github.io/posts/playing_with_systemtap/</link>
      <pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/playing_with_systemtap/</guid>
      <description>Playing with systemtap</description>
    </item>
    
    <item>
      <title>Pipe Viewer</title>
      <link>https://klyr.github.io/posts/pipe_viewer/</link>
      <pubDate>Fri, 25 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/pipe_viewer/</guid>
      <description> Pipe Viewer To visualize data throughput through a pipe use Pipe Viewer tool.
$ sudo apt-get install pv For example just replace every pipe with | pv |:
$ cat bigfile.txt | gzip -9 &amp;gt; /tmp/test.gz $ ```shell $ cat bigfile.txt | pv | gzip -9 &amp;gt; /tmp/test.gz 14MB 0:00:00 [22.6MB/s] [ &amp;lt;=&amp;gt; ] $</description>
    </item>
    
    <item>
      <title>Ip routing based on destination port</title>
      <link>https://klyr.github.io/posts/ip_route_based_on_port/</link>
      <pubDate>Wed, 18 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/ip_route_based_on_port/</guid>
      <description>Route packets based on destination port</description>
    </item>
    
    <item>
      <title>C pointers &amp; Ksplice challenge</title>
      <link>https://klyr.github.io/posts/c_pointers_ksplice_challenge/</link>
      <pubDate>Wed, 19 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/c_pointers_ksplice_challenge/</guid>
      <description> C pointers &amp;amp; Ksplice challenge The Ksplice Pointer Challenge.
#include &amp;lt;stdio.h&amp;gt; int main() { int x[5]; printf(&amp;#34;%p\n&amp;#34;, x); printf(&amp;#34;%p\n&amp;#34;, x+1); printf(&amp;#34;%p\n&amp;#34;, &amp;amp;x); printf(&amp;#34;%p\n&amp;#34;, &amp;amp;x+1); return 0; } On a 64bits architecture:
0x7fffe4a594d0 0x7fffe4a594d4 0x7fffe4a594d0 0x7fffe4a594e4</description>
    </item>
    
    <item>
      <title>Commands &amp; key bindings reminders</title>
      <link>https://klyr.github.io/posts/commands_and_keys_reminders/</link>
      <pubDate>Wed, 28 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/commands_and_keys_reminders/</guid>
      <description>Usefull command reminders</description>
    </item>
    
    <item>
      <title>Standalone Python project/installation</title>
      <link>https://klyr.github.io/posts/standalone_python_project/</link>
      <pubDate>Tue, 16 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/standalone_python_project/</guid>
      <description>Let&amp;rsquo;s take an example of installing Django without using Debian apt command. We will use virtualenv to make a self-contained python directory.
First create your installation directory:
$ mkdir -p project/django $ cd project/django Get the virtualenv tool:
$ wget --no-check-certificate &amp;#39;https://raw.github.com/pypa/virtualenv/develop/virtualenv.py&amp;#39; Create the virtual environment:
$ python virtualenv.py --no-site-packages --distribute python_django_env Note interesting parameters::
--no-site-packages Don&amp;#39;t give access to the global site-packages dir to the virtual environment --distribute Use Distribute instead of Setuptools.</description>
    </item>
    
    <item>
      <title>Using a free CDN, Cloudflare</title>
      <link>https://klyr.github.io/posts/using_a_free_cdn/</link>
      <pubDate>Mon, 08 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/using_a_free_cdn/</guid>
      <description>CDN: Content delivery network A CDN act as a cache for static ressources of your web server. One famous CDN is Akamai but is quite expensive.
CDN architecture is quite complex with a set of multiple proxies located in multiple datacenters around the world. The goal is to reduce the distance to the minimum between the served ressource and the user asking for the ressource.
A CDN not only saves the bandwith and load of your server but also global Internet peers involved between the client and the server.</description>
    </item>
    
    <item>
      <title>Manipulating data with R</title>
      <link>https://klyr.github.io/posts/manipulating_data_with_r/</link>
      <pubDate>Tue, 02 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/manipulating_data_with_r/</guid>
      <description>Newbie guide to R</description>
    </item>
    
    <item>
      <title>Various reminders about OpenSSL and Certificates</title>
      <link>https://klyr.github.io/posts/various_reminders_about_openssl_and_certificates/</link>
      <pubDate>Fri, 29 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/various_reminders_about_openssl_and_certificates/</guid>
      <description>Create a self-signed Certificate authority Create an RSA key Use the genrsa command to create the server private key with the following properties:
 The key is protected with the symetric AES256 algorithm. (protecting the key is not mandatory) The key is 2048 bits long.  Here is the command:
$ openssl genrsa -aes256 -out private/server.key 2048 Generating RSA private key, 2048 bit long modulus ...............................................................................................+++ ..+++ unable to write &amp;#39;random state&amp;#39; e is 65537 (0x10001) Enter pass phrase for test.</description>
    </item>
    
    <item>
      <title>Colored less output</title>
      <link>https://klyr.github.io/posts/colored_less_output/</link>
      <pubDate>Tue, 26 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/colored_less_output/</guid>
      <description>To colorize the output of less, use the GNU Source-highlight tool.
Install Debian package:
$ sudo apt-get install source-highlight Add this to your shell configuration file:
export LESSOPEN=&amp;#34;| /usr/share/source-highlight/src-hilite-lesspipe.sh %s&amp;#34; export LESS=&amp;#39; -R &amp;#39;</description>
    </item>
    
    <item>
      <title>Preserving Buffer Cache State</title>
      <link>https://klyr.github.io/posts/preserving_buffer_cache/</link>
      <pubDate>Mon, 25 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/preserving_buffer_cache/</guid>
      <description>When archiving big files (for example a big database) rsync feeds uselessly the disk cache. Thanks to the posix_fadvise linux system call we can tell the operating system that keeping archived data in cache is useless, leaving the disk cache for other applications (ie: the database).
Tobi Oetiker explains this on his blog and made a patch for rsync. The patch does not work out of the box and needed little modifications.</description>
    </item>
    
  </channel>
</rss>