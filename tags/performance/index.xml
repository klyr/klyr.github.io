<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Performance on ~klyr</title>
    <link>https://klyr.github.io/tags/performance/</link>
    <description>Recent content in Performance on ~klyr</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Apr 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://klyr.github.io/tags/performance/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Playing with eBPF (extended BPF)</title>
      <link>https://klyr.github.io/posts/ebpf/</link>
      <pubDate>Wed, 25 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/ebpf/</guid>
      <description>Introduction eBPF stands for extended Berkeley Packet Filter, but can do more than just filter packets.
The idea is the same as when you use the tcpdump command:
$ tcpdump ip host helios and port 80 the ip host helios and port 80 filter/program is compiled and run in a virtual machine.
With eBPF, you program in C (a restricted version of it), you compile it to the target VM then load this code inside the kernel and run it inside the kernel.</description>
    </item>
    
  </channel>
</rss>