<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>unix on ~klyr</title>
    <link>https://klyr.github.io/tags/unix/</link>
    <description>Recent content in unix on ~klyr</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://klyr.github.io/tags/unix/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>OpenSSH related stuff</title>
      <link>https://klyr.github.io/posts/openssh/</link>
      <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/openssh/</guid>
      <description>Create a ed25519 SSH key  ECC: Elliptic Curve Cryptography is a family of algorithms (ECDSA, ed25519) Curve25519: name of the elliptic curve Ed25519: Name of the signature algorithm  $ ssh-keygen -a 100 -t ed25519 -b 521 -f ~/.ssh/id_ed25519.barbot.org -C &amp;#34;julien@barbot.org&amp;#34; You can look at explainshell.com to understand each parameters.
Use this key for specific hosts:
$ cat .ssh/config Host github.com IdentityFile ~/.</description>
    </item>
    
    <item>
      <title>Playing with the P4 language</title>
      <link>https://klyr.github.io/posts/playing_with_p4/</link>
      <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/playing_with_p4/</guid>
      <description>Introduction P4 is a domain-specific compiled programming language for network data forwarding. It does not know anything about already existing protocols: it doesn&amp;rsquo;t know IP, nor TCP.
A P4 program is compiled to something that is understandable by the P4 aware device. Such device can be a really hardware switch, a software switch, a FPGA.
In this article we will try to use a software switch. More precisely, the uBPF backend.</description>
    </item>
    
    <item>
      <title>Playing with uBPF</title>
      <link>https://klyr.github.io/posts/playing_with_ubpf/</link>
      <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/playing_with_ubpf/</guid>
      <description>Introduction uBPF is a user-land implementation of the eBPF VM.
Installation $ git clone https://github.com/iovisor/ubpf.git $ cd ubpf $ make -C vm This compiles the ubpf library (libubpf.a) and a test program to use this library.
Run a simple eBPF program with uBPF static int idouble(int a) { return (a * 2); } int bpf_prog(void *ctx) { int a = 1; a = idouble(a); return (a); } Compile to a BPF binary, which is executable by the kernel eBPF VM, or, in our specific case, the user-land uBFP VM.</description>
    </item>
    
    <item>
      <title>Pipe Viewer</title>
      <link>https://klyr.github.io/posts/pipe_viewer/</link>
      <pubDate>Fri, 25 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/pipe_viewer/</guid>
      <description> Pipe Viewer To visualize data throughput through a pipe use Pipe Viewer tool.
$ sudo apt-get install pv For example just replace every pipe with | pv |:
$ cat bigfile.txt | gzip -9 &amp;gt; /tmp/test.gz $ ```shell $ cat bigfile.txt | pv | gzip -9 &amp;gt; /tmp/test.gz 14MB 0:00:00 [22.6MB/s] [ &amp;lt;=&amp;gt; ] $</description>
    </item>
    
    <item>
      <title>Various reminders about OpenSSL and Certificates</title>
      <link>https://klyr.github.io/posts/various_reminders_about_openssl_and_certificates/</link>
      <pubDate>Fri, 29 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/various_reminders_about_openssl_and_certificates/</guid>
      <description>Create a self-signed Certificate authority Create an RSA key Use the genrsa command to create the server private key with the following properties:
 The key is protected with the symetric AES256 algorithm. (protecting the key is not mandatory) The key is 2048 bits long.  Here is the command:
$ openssl genrsa -aes256 -out private/server.key 2048 Generating RSA private key, 2048 bit long modulus ...............................................................................................+++ ..+++ unable to write &amp;#39;random state&amp;#39; e is 65537 (0x10001) Enter pass phrase for test.</description>
    </item>
    
    <item>
      <title>Colored less output</title>
      <link>https://klyr.github.io/posts/colored_less_output/</link>
      <pubDate>Tue, 26 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/colored_less_output/</guid>
      <description>To colorize the output of less, use the GNU Source-highlight tool.
Install Debian package:
$ sudo apt-get install source-highlight Add this to your shell configuration file:
export LESSOPEN=&amp;#34;| /usr/share/source-highlight/src-hilite-lesspipe.sh %s&amp;#34; export LESS=&amp;#39; -R &amp;#39;</description>
    </item>
    
    <item>
      <title>Preserving Buffer Cache State</title>
      <link>https://klyr.github.io/posts/preserving_buffer_cache/</link>
      <pubDate>Mon, 25 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/preserving_buffer_cache/</guid>
      <description>When archiving big files (for example a big database) rsync feeds uselessly the disk cache. Thanks to the posix_fadvise linux system call we can tell the operating system that keeping archived data in cache is useless, leaving the disk cache for other applications (ie: the database).
Tobi Oetiker explains this on his blog and made a patch for rsync. The patch does not work out of the box and needed little modifications.</description>
    </item>
    
  </channel>
</rss>