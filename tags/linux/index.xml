<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on ~klyr</title>
    <link>https://klyr.github.io/tags/linux/</link>
    <description>Recent content in linux on ~klyr</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Apr 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://klyr.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Playing with eBPF (extended BPF)</title>
      <link>https://klyr.github.io/posts/ebpf/</link>
      <pubDate>Wed, 25 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/ebpf/</guid>
      <description>Let&amp;rsquo;s play with eBPF in order to find what is slowing down my computer</description>
    </item>
    
    <item>
      <title>Playing with linux framebuffer</title>
      <link>https://klyr.github.io/posts/playing_with_linux_framebuffer/</link>
      <pubDate>Wed, 19 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/playing_with_linux_framebuffer/</guid>
      <description>Playing with the framebuffer on Linux</description>
    </item>
    
    <item>
      <title>Updating IP routes programmatically</title>
      <link>https://klyr.github.io/posts/updating_ip_routes_in_c/</link>
      <pubDate>Mon, 10 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/updating_ip_routes_in_c/</guid>
      <description>ioctl(2) is a special system call used when no other system call can handle a specific I/O operation. For exemple, the generic write(2) syscall is used for writing to a specified file descriptor but there is neither syscall to open the CD-tray nor syscall to manage routing tables: ioctl is here as a fit-all syscall.
From the man page:
NAME ioctl - control device SYNOPSIS #include &amp;lt;sys/ioctl.h&amp;gt; int ioctl(int d, int request, void *args); DESCRIPTION The ioctl() function manipulates the underlying device parameters of special files.</description>
    </item>
    
    <item>
      <title>Display backtrace when a program segfaults</title>
      <link>https://klyr.github.io/posts/gnu_backtrace_extension/</link>
      <pubDate>Mon, 03 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/gnu_backtrace_extension/</guid>
      <description>When an application crashes, with a segfault for example it can be usefull have debugging help like a stacktrace of function calls</description>
    </item>
    
    <item>
      <title>Trickle, lightweight userspace bandwidth shaper</title>
      <link>https://klyr.github.io/posts/trickle/</link>
      <pubDate>Tue, 10 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/trickle/</guid>
      <description>What &amp;ldquo;Trickle is a portable lightweight userspace bandwidth shaper. It can run in collaborative mode (together with trickled) or in stand alone mode.&amp;rdquo;
Before, no limitation:
$ wget &amp;#39;http://wwww.example.org/somefile&amp;#39; --2012-07-10 14:46:13-- http://wwww.example.org/somefile [ ... ] 2012-07-10 14:46:13 (866 KB/s) - `somefile&amp;#39; saved [12485] After, limited to 40 kbit/s:
$ trickle -v -s -d 40 wget &amp;#39;http://www.example.org/somefile&amp;#39; --2012-07-10 14:50:27-- http://wwww.example.org/somefile [ ... ] wget: [trickle] avg: 20.8 KB/s; win: 20.8 KB/s wget: [trickle] avg: 40.</description>
    </item>
    
    <item>
      <title>Playing with systemtap</title>
      <link>https://klyr.github.io/posts/playing_with_systemtap/</link>
      <pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/playing_with_systemtap/</guid>
      <description>Playing with systemtap</description>
    </item>
    
    <item>
      <title>Ip routing based on destination port</title>
      <link>https://klyr.github.io/posts/ip_route_based_on_port/</link>
      <pubDate>Wed, 18 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://klyr.github.io/posts/ip_route_based_on_port/</guid>
      <description>Route packets based on destination port</description>
    </item>
    
  </channel>
</rss>